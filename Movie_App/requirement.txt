REQUIREMENTS:
 You will be given one of the problems below.
 Design the solution to this problem using the OOP paradigm.
 The application must be implemented in C++ and use layered architecture.
 The application must provide a console based user interface.
 Please provide tests for non-trivial functions. Test coverage should be at least 98% for all
layers, except UI.
 Please provide specifications for your functions.
 For problems 3 and 4, if you choose a different entity from the one that is specified in
the problem requirement, the entity must have at least the same characteristics.
 The database of entities will be represented by a memory repository. Please add at least
10 entities in your memory repository (source code).
 Add basic data validation.
 Please handle the following situations:
o If an entity that already exists is added, a message will be shown and the entity will not be stored. You must decide what makes an entity unique.
o If the user tries to delete an entity that does not exist, a message will be shown and there will be no effect on the list of entities.
 The problem should be solved in 2 iterations, the first one is due in Week 5 and the second in Week 6:
o Iteration 1 should solve at least the requirements related to the administrator mode. You should define a user defined type DynamicVector, which provides the specific operations: add, remove, length, etc. The array of elements in the DynamicVector must be dynamically allocated.
o Iteration 2 should solve all problem requirements. The DynamicVector should be modified to use templates.
 After delivering this entire assignment (both iterations), you must send a .zip archive containing your source code files (without any .obj or executable files) to the email address: commit@scs.ubbcluj.ro.


 LMDB â€“ LOCAL MOVIE DATABASE

So many movies, so little time... To make sure you do not miss any good movies, you absolutely need a software application to help you manage your films and create watch lists. The application can be used in two modes: administrator and user. When the application is started, it will offer the option to choose the mode.
Administrator mode: The application will have a database2, which holds all the movies. You must be able to update the database, meaning: add a new movie, delete a movie and update the information of a movie. Each Movie has a title, a genre, a year of release, a number of likes and a trailer. The trailer is memorised as a link towards an online resource. The administrators will also have the option to see all the movies in the database.
1 Feel free to use any other animal you prefer (cat, parrot, penguin, etc.). 2 Please see the requirements at the beginning of this document.
             
User mode: A user can create a watch list with the movies that he wants to watch. The application will allow the user to:
a. See the movies in the database having a given genre (if the genre is empty, see all the movies), one by one. When the user chooses this option, the data of the first movie (title, genre, year of release, number of likes) is displayed and the trailer is played in the browser.
b. If the user likes the trailer, he/she can choose to add the movie to his/her watch list.
c. If the trailer is not satisfactory, the user can choose not to add the movie to the watch list and to continue to the next. In this case, the information corresponding to the next movie is shown and the user is again offered the possibility to add it to the watch list. This can continue as long as the user wants, as when arriving to the end of the list of movies with the
given genre, if the user chooses next, the application will again show the first movie.
d. Delete a movie from the watch list, after the user watched the movie. When deleting a movie from the watch list, the user can also rate the movie (with a like), and in this case, the
likes of the movie in the repository will be increased.
e. See the watch list.
